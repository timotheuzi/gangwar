#!/usr/bin/env python3
"""
Environment Variable Generator for Pimpin Game

This script analyzes Python source files to find environment variables
used with os.environ.get() and generates a .env file in the dist directory
for any variables that the standalone executable might need but doesn't have embedded.
"""

import os
import re
import ast
import secrets
from pathlib import Path


class EnvVarAnalyzer(ast.NodeVisitor):
    """AST visitor to find os.environ.get() calls"""

    def __init__(self):
        self.env_vars = {}

    def visit_Call(self, node):
        """Visit function calls to find os.environ.get()"""
        if (isinstance(node.func, ast.Attribute) and
            isinstance(node.func.value, ast.Attribute) and
            isinstance(node.func.value.value, ast.Name) and
            node.func.value.value.id == 'os' and
            node.func.value.attr == 'environ' and
            node.func.attr == 'get'):

            if len(node.args) >= 1:
                var_name = self._get_string_value(node.args[0])
                default_value = None

                if len(node.args) >= 2:
                    default_value = self._get_string_value(node.args[1])

                if var_name:
                    self.env_vars[var_name] = default_value

        self.generic_visit(node)

    def _get_string_value(self, node):
        """Extract string value from AST node"""
        if isinstance(node, ast.Constant):
            if isinstance(node.value, str):
                return node.value
            elif isinstance(node.value, int):
                return str(node.value)
        return None


def find_env_vars_in_file(file_path):
    """Find environment variables in a Python file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            source = f.read()

        tree = ast.parse(source, filename=file_path)
        analyzer = EnvVarAnalyzer()
        analyzer.visit(tree)

        return analyzer.env_vars
    except Exception as e:
        print(f"Error analyzing {file_path}: {e}")
        return {}


def find_env_vars_in_project(root_path):
    """Find all environment variables used in the project"""
    all_env_vars = {}

    # Find all Python files
    for py_file in Path(root_path).rglob('*.py'):
        env_vars = find_env_vars_in_file(py_file)
        all_env_vars.update(env_vars)

    return all_env_vars


def generate_env_file(env_vars, output_path):
    """Generate .env file with environment variables"""
    dist_dir = Path(output_path)
    dist_dir.mkdir(exist_ok=True)

    env_file_path = dist_dir / '.env'

    with open(env_file_path, 'w', encoding='utf-8') as f:
        f.write("# Environment variables for Gangwar Game standalone executable\n")
        f.write("# This file is automatically generated during build\n")
        f.write("# Modify these values as needed for your deployment\n\n")

        for var_name, default_value in sorted(env_vars.items()):
            # Skip variables that are set with setdefault (they have defaults in code)
            if var_name == 'ENGINEIO_FORCE_THREADING':
                continue

            # Generate appropriate default values
            if var_name == 'SECRET_KEY':
                # Generate a secure secret key
                value = secrets.token_hex(16)
                comment = "# Secret key for Flask sessions (auto-generated)"
            elif var_name == 'FLASK_DEBUG':
                value = default_value or 'False'
                comment = "# Enable/disable Flask debug mode"
            elif var_name == 'PORT':
                # PORT variable for PythonAnywhere deployment
                value = default_value or '5009'
                comment = "# Port for web server (PythonAnywhere default: 5009)"
            else:
                value = default_value or ''
                comment = f"# Default: {default_value}" if default_value else "# No default value"

            f.write(f"{comment}\n")
            f.write(f"{var_name}={value}\n\n")

    print(f"Generated .env file at: {env_file_path}")
    return env_file_path


def main():
    """Main function"""
    project_root = Path(__file__).parent

    print("Analyzing Python files for environment variables...")

    # Find all environment variables
    env_vars = find_env_vars_in_project(project_root)

    if not env_vars:
        print("No environment variables found.")
        return

    print(f"Found {len(env_vars)} environment variables:")
    for var, default in env_vars.items():
        print(f"  {var}: {default}")

    # Generate .env file in dist directory
    dist_path = project_root / 'dist'
    env_file = generate_env_file(env_vars, dist_path)

    print("Environment variable generation complete!")


if __name__ == '__main__':
    main()
